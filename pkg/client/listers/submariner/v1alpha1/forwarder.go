/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mkimuram/k8s-ext-connector/pkg/apis/submariner/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ForwarderLister helps list Forwarders.
type ForwarderLister interface {
	// List lists all Forwarders in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Forwarder, err error)
	// Forwarders returns an object that can list and get Forwarders.
	Forwarders(namespace string) ForwarderNamespaceLister
	ForwarderListerExpansion
}

// forwarderLister implements the ForwarderLister interface.
type forwarderLister struct {
	indexer cache.Indexer
}

// NewForwarderLister returns a new ForwarderLister.
func NewForwarderLister(indexer cache.Indexer) ForwarderLister {
	return &forwarderLister{indexer: indexer}
}

// List lists all Forwarders in the indexer.
func (s *forwarderLister) List(selector labels.Selector) (ret []*v1alpha1.Forwarder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Forwarder))
	})
	return ret, err
}

// Forwarders returns an object that can list and get Forwarders.
func (s *forwarderLister) Forwarders(namespace string) ForwarderNamespaceLister {
	return forwarderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ForwarderNamespaceLister helps list and get Forwarders.
type ForwarderNamespaceLister interface {
	// List lists all Forwarders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Forwarder, err error)
	// Get retrieves the Forwarder from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Forwarder, error)
	ForwarderNamespaceListerExpansion
}

// forwarderNamespaceLister implements the ForwarderNamespaceLister
// interface.
type forwarderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Forwarders in the indexer for a given namespace.
func (s forwarderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Forwarder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Forwarder))
	})
	return ret, err
}

// Get retrieves the Forwarder from the indexer for a given namespace and name.
func (s forwarderNamespaceLister) Get(name string) (*v1alpha1.Forwarder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("forwarder"), name)
	}
	return obj.(*v1alpha1.Forwarder), nil
}
